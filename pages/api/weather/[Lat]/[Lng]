import axios from 'axios';

export default async function handler(req, res) {
  const { lat, lng } = req.query;
  
  if (!lat || !lng) {
    return res.status(400).json({ error: 'Latitude and longitude are required' });
  }
  
  try {
    // First, get the forecast grid endpoint from NWS API
    const pointsResponse = await axios.get(
      `https://api.weather.gov/points/${lat},${lng}`,
      { headers: { 'User-Agent': 'DelawareRiverDashboard/1.0 (contact@example.com)' } }
    );
    
    const forecastUrl = pointsResponse.data.properties.forecast;
    const hourlyForecastUrl = pointsResponse.data.properties.forecastHourly;
    
    // Now get the actual forecast
    const forecastResponse = await axios.get(
      forecastUrl,
      { headers: { 'User-Agent': 'DelawareRiverDashboard/1.0 (contact@example.com)' } }
    );
    
    // And hourly forecast for current conditions
    const hourlyResponse = await axios.get(
      hourlyForecastUrl,
      { headers: { 'User-Agent': 'DelawareRiverDashboard/1.0 (contact@example.com)' } }
    );
    
    // Extract current conditions from hourly forecast
    const currentPeriod = hourlyResponse.data.properties.periods[0];
    const current = {
      temp: currentPeriod.temperature,
      condition: currentPeriod.shortForecast,
      precipitation: currentPeriod.probabilityOfPrecipitation.value !== null 
        ? `${currentPeriod.probabilityOfPrecipitation.value}%` 
        : '0%',
      wind: `${currentPeriod.windDirection} ${currentPeriod.windSpeed}`
    };
    
    // Extract daily forecast (we just want 5 days)
    const forecast = forecastResponse.data.properties.periods
      .filter(period => period.isDaytime) // Only use day forecasts
      .slice(0, 5) // Take 5 days
      .map(period => {
        // Find the night forecast for low temp
        const nightIndex = forecastResponse.data.properties.periods.findIndex(p => 
          p.number === period.number + 1
        );
        const nightPeriod = nightIndex !== -1 
          ? forecastResponse.data.properties.periods[nightIndex] 
          : null;
        
        return {
          day: period.name === 'Today' ? 'Today' : period.name.slice(0, 3),
          high: period.temperature,
          low: nightPeriod ? nightPeriod.temperature : null,
          condition: period.shortForecast,
          precipitation: period.probabilityOfPrecipitation.value !== null 
            ? `${period.probabilityOfPrecipitation.value}%` 
            : '0%'
        };
      });
    
    res.status(200).json({
      current,
      forecast
    });
  } catch (error) {
    console.error(`Error fetching weather data for ${lat},${lng}:`, error);
    
    // If there's an API error, fall back to mock data for demonstration
    if (process.env.NODE_ENV !== 'production') {
      console.log('Returning fallback weather data');
      return res.status(200).json(getMockWeatherData());
    }
    
    res.status(500).json({ error: 'Failed to fetch weather data' });
  }
}

// Generate mock weather data for development/demo purposes
function getMockWeatherData() {
  return {
    current: {
      temp: 58,
      condition: "Partly Cloudy",
      precipitation: "0%",
      wind: "SW 5 mph"
    },
    forecast: [
      { day: "Today", high: 62, low: 45, condition: "Partly Cloudy", precipitation: "10%" },
      { day: "Thu", high: 64, low: 48, condition: "Mostly Sunny", precipitation: "5%" },
      { day: "Fri", high: 59, low: 52, condition: "Rain", precipitation: "70%" },
      { day: "Sat", high: 55, low: 45, condition: "Showers", precipitation: "40%" },
      { day: "Sun", high: 60, low: 44, condition: "Partly Cloudy", precipitation: "20%" }
    ]
  };
}
